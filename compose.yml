services:    # 컨테이너를 정의하는 서비스라고 선언

  nginx: # 실행할 컨테이너의 주소 (IP주소와 같은 역할), 실행할 컨테이너 하나 정의 시작
    image: nginx # 빌드되어 생성된 이미지를 지정 하여 가져옴, # 현재 디렉토리(.)의 Dockerfile을 사용하여 이미지를 빌드 하려면 build: .
    ports:
      - 80:80  # 오직 Nginx(웹서버)컨테이너만 만 외부에서 접근 가능하게함 [호스트 포트]:[컨테이너 포트]
    # 설정파일은 도커 볼륨 사용
    volumes:
      # Nginx 설정파일 볼륨 마운트, 이건 디렉토리를 내가 직접 미리 만들어서 마운트하는 개념 # [호스트 경로]:[컨테이너 경로]
      - /home/ubuntu/docker/nginx/conf.d:/etc/nginx/conf.d
      # Nginx 로그를 호스트에 저장
      - /home/ubuntu/docker/nginx/logs:/var/log/nginx
    networks:
      - my-network
      # 백엔드 서버들이 먼저 실행된 후에 Nginx가 실행되도록 의존성을 설정
    depends_on:
      - server1
      - server2

  server1: # ports 설정이 없는 컨테이너는 독립적으로 실행
    container_name: server1 # 컨테이너 이름을 지정
    image: 291234479386.dkr.ecr.ap-northeast-2.amazonaws.com/myapp/myapp:latest
    volumes:
      # 애플리케이션 로그를 호스트에 저장
      - /home/ubuntu/docker/server1/logs:/app/logs
    networks:
      - my-network

  server2:
    container_name: server2
    image: 291234479386.dkr.ecr.ap-northeast-2.amazonaws.com/myapp/myapp:latest
    volumes:
      # 애플리케이션 로그를 호스트에 저장
      - /home/ubuntu/docker/server2/logs:/app/logs
    networks:
      - my-network

# 사용할 네트워크를 명시적으로 정의
networks:
  my-network:
    driver: bridge